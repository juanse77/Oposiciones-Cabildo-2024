Tema 13. Componentes de los sistemas de información.

13.1. Características de las arquitecturas cliente-servidor y multi-capa.

Arquitectura Cliente-Servidor

	Características:

		Distribución de Funciones:

			El modelo cliente-servidor se divide principalmente en dos entidades: el cliente y el servidor. El cliente realiza solicitudes de servicios o recursos al servidor, que a su vez procesa esas solicitudes y envía una respuesta.

		Independencia de Componentes:

			Los clientes y servidores son componentes independientes que pueden actualizarse, reemplazarse o ampliarse sin afectar al otro, siempre que se mantengan las interfaces de comunicación.
		
		Centralización del Servidor:

			El servidor centraliza la lógica de la aplicación, la base de datos o los recursos compartidos, y gestiona el acceso de múltiples clientes a estos recursos.

		Escalabilidad:

			Es relativamente fácil de escalar horizontalmente (añadiendo más servidores) para manejar un mayor número de solicitudes de clientes.

		Seguridad:

			La seguridad puede ser gestionada de manera centralizada en el servidor, lo que facilita el control de acceso y la protección de datos.

		Conexión y Comunicación:

			La comunicación entre el cliente y el servidor generalmente se realiza a través de redes usando protocolos estándar como HTTP, FTP, o TCP/IP.

Arquitectura Multi-Capa:

	Características:

		Capas Separadas:

			Una arquitectura multi-capa divide el sistema en varias capas lógicas o físicas, cada una con responsabilidades específicas. Las capas típicas son: capa de presentación (interfaz de usuario), capa de lógica de negocio y capa de acceso a datos.

		Modularidad:

			Cada capa es modular y puede ser desarrollada, mantenida y reemplazada independientemente, lo que facilita la reutilización de componentes y la actualización del sistema.

		Mantenimiento y Evolución:

			Al estar organizado en capas, el mantenimiento del sistema es más sencillo ya que los cambios en una capa no afectan directamente a las otras. Esto hace que sea más fácil evolucionar y escalar la aplicación.

		Distribución de la Carga:

			En una arquitectura distribuida, cada capa puede estar en un servidor diferente, lo que permite distribuir la carga de trabajo y mejorar el rendimiento del sistema.

		Seguridad:

			La seguridad se puede gestionar de forma más detallada, implementando controles específicos en cada capa, como autenticación en la capa de presentación y validación de datos en la capa de negocio.

		Interoperabilidad y Flexibilidad:

			Las capas interactúan entre sí a través de interfaces definidas, lo que permite una mayor flexibilidad en la integración de tecnologías y la interoperabilidad con otros sistemas.

Comparación y Usos:
	
	Cliente-Servidor es más sencillo y es adecuado para aplicaciones donde se necesita un enfoque directo para la interacción entre usuarios y servicios, como aplicaciones web básicas o sistemas de bases de datos centralizados.

	Multi-Capa es más complejo y se usa en aplicaciones más grandes y con mayores necesidades de escalabilidad, mantenimiento, y donde la separación de responsabilidades es crucial, como sistemas empresariales o aplicaciones web a gran escala.

	Cada arquitectura tiene sus propios beneficios y se elige según las necesidades específicas del proyecto, el entorno de desarrollo y las expectativas de crecimiento del sistema.

13.2. Sistemas Scale-out.

Sistemas Scale-Out:

	Definición:

		Scale-out se refiere a la capacidad de aumentar la capacidad de un sistema agregando más nodos o unidades (servidores, discos, etc.) al sistema existente en lugar de mejorar o sustituir los componentes individuales (como sucede en el enfoque scale-up).

	Características Principales:

		Escalabilidad Horizontal:

			Los sistemas scale-out escalan horizontalmente, lo que significa que se agrega más hardware (servidores, almacenamiento, etc.) para manejar el incremento de carga, sin la necesidad de reemplazar o actualizar los equipos existentes.

		Alta Disponibilidad y Redundancia:

			Debido a que el sistema se distribuye a través de múltiples nodos, es inherentemente más resistente a fallos. Si un nodo falla, los otros nodos pueden continuar operando, proporcionando alta disponibilidad.

		Costo Eficiente:

			Agregar nodos más pequeños y económicos para aumentar la capacidad suele ser más rentable que actualizar a un único nodo más grande y caro.

		Flexibilidad:

			Los sistemas scale-out permiten agregar capacidad en función de las necesidades, lo que proporciona una gran flexibilidad para responder a incrementos en la demanda o en los datos que se manejan.

		Sistemas Distribuidos:

			Este enfoque es común en sistemas distribuidos donde múltiples servidores trabajan juntos para proporcionar un servicio único y cohesivo, como en el caso de bases de datos distribuidas, sistemas de archivos distribuidos (ej. Hadoop HDFS), y servicios en la nube.

		Equilibrio de Carga:

			En un sistema scale-out, la carga se distribuye entre todos los nodos, lo que permite un mejor uso de los recursos disponibles y puede mejorar el rendimiento general del sistema.

		Descentralización:

			A menudo, los sistemas scale-out son descentralizados, lo que significa que no dependen de un único punto de control o fallo. Cada nodo funciona de manera semi-independiente o completamente independiente en algunos diseños.

		Capacidad de Crecimiento Ilimitado:

			En teoría, un sistema scale-out puede crecer indefinidamente agregando más nodos. En la práctica, existen limitaciones como la complejidad de la administración, pero el diseño scale-out es mucho más flexible para crecer que los sistemas scale-up.

	Aplicaciones Comunes:

		Almacenamiento Distribuido: Usado en sistemas como Ceph o Amazon S3, donde se necesita almacenar grandes cantidades de datos y acceder a ellos desde múltiples ubicaciones.

		Bases de Datos NoSQL: Sistemas como Cassandra o MongoDB que pueden manejar grandes volúmenes de datos distribuyendo la carga a través de varios servidores.

		Servidores Web: Infraestructuras de servidores web que distribuyen el tráfico entre varios servidores utilizando técnicas como el balanceo de carga.

		Computación en la Nube: Las plataformas de nube como AWS, Google Cloud y Microsoft Azure utilizan arquitecturas scale-out para proporcionar servicios de computación escalables.

	Ventajas y Desafíos:

		Ventajas:

			- Costo-beneficio: Agregar nodos más pequeños es más económico que actualizar un único nodo.
			- Flexibilidad y Adaptabilidad: Facilita responder rápidamente a cambios en la demanda.
			- Resiliencia y Tolerancia a Fallos: Menor riesgo de fallos catastróficos debido a la distribución de la carga.

		Desafíos:

			- Complejidad de Gestión: A medida que se agregan más nodos, la complejidad para administrar y coordinar los recursos aumenta.
			- Consistencia de Datos: Mantener la consistencia de datos en un sistema distribuido puede ser complejo, especialmente en entornos con alta concurrencia.
			- Latencia: La latencia puede aumentar si los nodos están geográficamente dispersos.

	Los sistemas scale-out son ideales para organizaciones que necesitan escalabilidad, flexibilidad y resiliencia en su infraestructura tecnológica, especialmente en un entorno de datos o tráfico en constante crecimiento.

13.3. Sistemas de alta disponibilidad.

Características de los Sistemas de Alta Disponibilidad:

	Redundancia:

		La redundancia es clave en un sistema de alta disponibilidad. Esto implica tener componentes duplicados o incluso triplicados (servidores, bases de datos, redes) para que si un componente falla, otro pueda tomar su lugar sin interrumpir el servicio.

	Balanceo de Carga:
		
		Se utilizan balanceadores de carga para distribuir el tráfico y las solicitudes entre múltiples servidores. Esto no solo mejora el rendimiento, sino que también asegura que si un servidor falla, el tráfico puede ser redirigido a otros servidores activos.

	Failover y Switchover:

		Failover se refiere al proceso automático de transferir la carga de trabajo de un sistema fallido a un sistema de respaldo. Switchover es similar, pero se hace manualmente o bajo control supervisado, generalmente usado en mantenimiento planificado.

	Monitoreo y Detección de Fallos:

		Los sistemas de alta disponibilidad incluyen herramientas de monitoreo continuo que detectan fallos o degradación en los componentes del sistema. Estos sistemas pueden alertar a los administradores o activar procesos automáticos de failover.

	Replicación de Datos:

		La replicación de datos es esencial para asegurar que todos los nodos de respaldo tengan la información más reciente. Esto puede hacerse de manera sincrónica (con confirmación inmediata entre réplicas) o asincrónica (con un retraso aceptable).

	Mantenimiento y Actualización sin Interrupción:

		Los sistemas de alta disponibilidad están diseñados para permitir actualizaciones de software o mantenimiento del hardware sin detener el servicio. Esto se logra mediante técnicas como el balanceo de carga y la replicación de datos.

	Tolerancia a Fallos:

		A través de la redundancia y la replicación, los sistemas de alta disponibilidad pueden continuar operando incluso en situaciones donde hay fallos parciales en la infraestructura.

	Escalabilidad:

		Muchos sistemas de alta disponibilidad están diseñados para ser escalables, permitiendo agregar más recursos para manejar aumentos en la demanda sin comprometer la disponibilidad.

Implementación de Sistemas de Alta Disponibilidad:

	Clústeres de Alta Disponibilidad:

		Un clúster de alta disponibilidad es un grupo de servidores que trabajan juntos para asegurar que si uno falla, otro asuma su carga. Esto es común en bases de datos, servidores de aplicaciones, y servicios críticos.

	Sistemas Distribuidos:

		En un sistema distribuido de alta disponibilidad, las tareas y datos se distribuyen entre varios nodos. Ejemplos incluyen sistemas de archivos distribuidos y bases de datos distribuidas, como Cassandra o MongoDB.

	Almacenamiento Redundante:

		Las soluciones de almacenamiento, como RAID (Redundant Array of Independent Disks) o sistemas de almacenamiento distribuidos, también juegan un papel en la alta disponibilidad al proteger contra la pérdida de datos en caso de fallo de disco.

	Planes de Recuperación ante Desastres (DR):

		Los sistemas de alta disponibilidad a menudo incluyen un plan de recuperación ante desastres, que es una estrategia para recuperar datos y restaurar operaciones después de un fallo catastrófico.

Ejemplos y Usos:

	Servicios Financieros:

		Bancos y sistemas de pago en línea utilizan alta disponibilidad para asegurar que las transacciones puedan completarse en cualquier momento sin interrupciones.

	Telecomunicaciones:

		Las redes telefónicas y de internet dependen de sistemas de alta disponibilidad para asegurar que los servicios de comunicación estén siempre disponibles.

	Comercio Electrónico:

		Las plataformas de comercio electrónico necesitan alta disponibilidad para manejar transacciones y accesos constantes de usuarios de todo el mundo.

Desafíos de los Sistemas de Alta Disponibilidad:

	Costo:

		Implementar y mantener sistemas de alta disponibilidad puede ser costoso debido a la necesidad de hardware y software redundantes y personal especializado para su mantenimiento.

	Complejidad:

		La administración y configuración de estos sistemas puede ser compleja, ya que requiere monitoreo constante, actualización y manejo de posibles fallos.

	Consistencia de Datos:

		Asegurar la consistencia de los datos entre nodos redundantes es un reto, especialmente en sistemas distribuidos.
		Los sistemas de alta disponibilidad son fundamentales para cualquier organización que necesite garantizar que sus servicios estén disponibles sin interrupciones, brindando confiabilidad y confianza tanto a usuarios internos como externos.