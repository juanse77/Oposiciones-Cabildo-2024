Tema 30. Bases de datos no relacionales.

30.1. Concepto y características. Ventajas y casos de usos.

	Una base de datos no relacional, también conocida como NoSQL (Not Only SQL), es un tipo de sistema de gestión de bases de datos que no sigue el modelo tradicional de bases de datos relacionales. A diferencia de las bases de datos relacionales que organizan datos en tablas con filas y columnas y utilizan SQL para la gestión y manipulación de datos, las bases de datos NoSQL están diseñadas para almacenar, recuperar y gestionar datos en formatos no tabulares.

	Características de las Bases de Datos No Relacionales

		- Flexibilidad de Esquema: No requieren esquemas fijos. Pueden almacenar datos sin una estructura rígida, lo que permite manejar diferentes tipos de datos y esquemas dentro de la misma base de datos.

		- Escalabilidad Horizontal: A diferencia de las bases de datos relacionales, las bases de datos NoSQL pueden escalar horizontalmente agregando más servidores en lugar de aumentar la capacidad de un solo servidor. Esto permite manejar grandes volúmenes de datos de manera más eficiente.

		- Modelo de Datos Flexible: Soportan varios modelos de datos, incluidos documentos, grafos, clave-valor y columnas anchas, lo que permite almacenar diferentes tipos de datos de acuerdo con los requisitos de la aplicación.

		- Alto Rendimiento: Ofrecen una alta velocidad de lectura y escritura, lo que las hace adecuadas para aplicaciones que requieren un acceso rápido a grandes cantidades de datos.

		- Manejo de Grandes Volúmenes de Datos: Están diseñadas para manejar grandes volúmenes de datos no estructurados o semi-estructurados, como registros de eventos, datos de sensores, datos de redes sociales, etc.

		- Alta Disponibilidad y Replicación: Muchas bases de datos NoSQL ofrecen replicación de datos y tolerancia a fallos para garantizar la alta disponibilidad y la continuidad del negocio.

	Ventajas de las Bases de Datos No Relacionales

		- Flexibilidad y Agilidad: Permiten a los desarrolladores realizar cambios en el modelo de datos sin necesidad de modificar la estructura de la base de datos. Esto es ideal para entornos ágiles donde los requisitos de datos pueden cambiar rápidamente.

		- Escalabilidad: Las bases de datos NoSQL son más fáciles de escalar horizontalmente en comparación con las bases de datos relacionales. Esto es particularmente útil para aplicaciones web y móviles de gran escala que manejan enormes volúmenes de datos y tráfico.

		- Rendimiento Mejorado: Dado que las bases de datos NoSQL están optimizadas para consultas rápidas de lectura y escritura, son ideales para aplicaciones que requieren tiempos de respuesta rápidos y una alta velocidad de procesamiento.

		- Compatibilidad con Datos No Estructurados: Son más adecuadas para almacenar datos no estructurados o semi-estructurados, como JSON, XML, BSON, etc. Esto facilita la integración con aplicaciones modernas que manejan datos en diversos formatos.

		- Replicación y Disponibilidad: Ofrecen mecanismos de replicación de datos y tolerancia a fallos, lo que garantiza que la base de datos esté siempre disponible y que los datos estén protegidos contra fallos.


	Casos de Uso de las Bases de Datos No Relacionales

		Aplicaciones de Redes Sociales: Donde los datos cambian constantemente y el esquema puede ser muy flexible (por ejemplo, perfiles de usuario, publicaciones, comentarios).

		Big Data y Análisis en Tiempo Real: Bases de datos como Apache Cassandra o MongoDB se utilizan en análisis de grandes volúmenes de datos para ofrecer respuestas rápidas.

		Aplicaciones de IoT (Internet de las Cosas): Que requieren la ingesta de grandes cantidades de datos de sensores en tiempo real.

		Aplicaciones de Comercio Electrónico: Donde el catálogo de productos puede cambiar con frecuencia y cada producto puede tener diferentes atributos.

		Sistemas de Recomendación: Como las recomendaciones de productos en Amazon o las recomendaciones de películas en Netflix, que requieren estructuras de datos flexibles y escalabilidad horizontal.

		Gestión de Contenidos y Documentos: Utilizan bases de datos de documentos (como MongoDB) para almacenar documentos y datos de contenido, como blogs, artículos y noticias.

	Conclusión
	
		Las bases de datos NoSQL son una opción poderosa para escenarios donde los datos no están estructurados, la escalabilidad es crucial, y se requiere un rendimiento óptimo con tiempos de respuesta rápidos. Si bien no son un reemplazo directo para las bases de datos relacionales, proporcionan una alternativa valiosa para ciertos casos de uso y requisitos empresariales.

30.2. Tipo de bases de datos no relacionales.

	Las bases de datos no relacionales, también conocidas como bases de datos NoSQL, abarcan varios tipos de modelos de datos que están diseñados para abordar diferentes necesidades y casos de uso. A continuación, se presentan los principales tipos de bases de datos no relacionales:

	1. Base de Datos de Documentos

		- Descripción: Estas bases de datos almacenan datos en formato de documentos, como JSON, BSON, XML, o YAML. Cada documento puede tener una estructura diferente, lo que permite almacenar datos no estructurados y semi-estructurados.

		- Características:
			Flexibilidad en el esquema de datos; los documentos pueden tener diferentes campos.
			Admite consultas ad hoc, índices secundarios y funciones de agregación.
			Ideal para almacenar datos jerárquicos y anidados.

			Casos de Uso: Aplicaciones web y móviles, sistemas de gestión de contenidos (CMS), aplicaciones de comercio electrónico, plataformas de redes sociales.

			Ejemplos: MongoDB, CouchDB, Amazon DocumentDB, ArangoDB.

	2. Base de Datos Clave-Valor

		- Descripción: Este tipo de base de datos es el más simple de todos los modelos NoSQL. Almacena datos como pares de clave-valor, donde una clave única está asociada con un valor. No tienen un esquema predefinido y son altamente eficientes en términos de rendimiento.

		- Características:

			Muy rápida para búsquedas y recuperación de datos.
			No hay restricciones de esquema, lo que permite una gran flexibilidad.
			Escalabilidad horizontal fácil de implementar.
			Casos de Uso: Cachés en memoria, sesiones de usuario, almacenamiento de configuraciones, aplicaciones en tiempo real donde la latencia es crítica.
			Ejemplos: Redis, Amazon DynamoDB, Riak, Memcached, Aerospike.

	3. Base de Datos de Columnas Anchas (Column Family)
		
		- Descripción: Estas bases de datos organizan los datos en columnas en lugar de filas. Los datos se almacenan en familias de columnas, que son conjuntos de columnas relacionadas. Cada fila puede tener un número diferente de columnas.

		- Características:
		
			Ideal para gestionar grandes volúmenes de datos distribuidos.
			Optimización para consultas de lectura rápida.
			Alto rendimiento en operaciones de escritura.
			Casos de Uso: Análisis de datos a gran escala, almacenamiento de registros de eventos, aplicaciones de big data, almacenes de datos analíticos.
			Ejemplos: Apache Cassandra, HBase, ScyllaDB, Amazon Keyspaces.

	4. Base de Datos de Grafos

		Descripción: Este tipo de base de datos utiliza nodos, aristas y propiedades para representar y almacenar datos. Los nodos representan entidades, las aristas representan relaciones entre las entidades y las propiedades almacenan información sobre los nodos y aristas.

		Características:

			Excelente para modelar relaciones complejas entre datos.
			Soporte para consultas altamente interactivas y traversal de grafos.
			Ideal para análisis de redes y datos conectados.
			Casos de Uso: Redes sociales, recomendaciones de productos, análisis de rutas, gestión de fraudes, motores de búsqueda semántica.
			Ejemplos: Neo4j, Amazon Neptune, ArangoDB (multi-modelo), OrientDB, Titan.

	5. Base de Datos Orientada a Objetos
	
		Descripción: Estas bases de datos almacenan datos en forma de objetos, similar a cómo los datos se representan en lenguajes de programación orientados a objetos (como Java, C++, etc.). Cada objeto contiene tanto datos como los métodos para operar sobre esos datos.

		Características:

			Almacenamiento de datos directamente como objetos, lo que elimina la necesidad de transformación entre el modelo de datos y el modelo de objetos de programación.
			Ideal para aplicaciones donde los datos son muy complejos y tienen relaciones jerárquicas profundas.
			Casos de Uso: Aplicaciones de diseño asistido por computadora (CAD), modelado de sistemas, almacenamiento de imágenes y multimedia.
			Ejemplos: Db4o, ObjectDB, Versant, GemStone.

	6. Base de Datos Multimodelo
		
		Descripción: Estas bases de datos pueden soportar múltiples tipos de modelos de datos (por ejemplo, clave-valor, documentos, grafos, columnas anchas) en un solo backend. Esto ofrece flexibilidad a los desarrolladores para manejar diferentes tipos de datos con la misma base de datos.

		Características:
			
			Soporte para consultas unificadas en diferentes modelos de datos.
			Ideal para aplicaciones que requieren diferentes tipos de almacenamiento y modelos de datos.
			Casos de Uso: Aplicaciones complejas que necesitan combinar diferentes tipos de datos y relaciones, como aplicaciones financieras, comercio electrónico, plataformas de inteligencia artificial.
			Ejemplos: ArangoDB, OrientDB, Cosmos DB (de Azure).

	Conclusión

		Cada tipo de base de datos no relacional tiene sus propias características, ventajas y casos de uso específicos. La elección del tipo de base de datos NoSQL depende en gran medida de los requisitos de la aplicación, como el tipo de datos, la necesidad de escalabilidad, la flexibilidad del esquema, la complejidad de las relaciones y el rendimiento deseado.

30.3. Gestores de bases de datos no relacionales. Características principales.

	Los gestores de bases de datos no relacionales (NoSQL) están diseñados para manejar diferentes tipos de datos de manera más flexible y escalable que los sistemas de gestión de bases de datos relacionales (RDBMS). Los sistemas NoSQL son utilizados ampliamente en aplicaciones modernas que requieren procesamiento de grandes volúmenes de datos, escalabilidad horizontal, y una arquitectura de datos más flexible. A continuación, se presentan las características principales de los gestores de bases de datos no relacionales:

	Características Principales de los Gestores de Bases de Datos No Relacionales

		- Esquema Flexible:

			A diferencia de las bases de datos relacionales, los gestores NoSQL no requieren un esquema de datos predefinido. Esto significa que los datos se pueden almacenar sin una estructura fija, permitiendo agregar nuevos campos fácilmente sin alterar la estructura existente.

			Esta característica es ideal para aplicaciones donde los datos pueden cambiar frecuentemente o tener diferentes formatos.

		- Escalabilidad Horizontal:

			Los sistemas NoSQL están diseñados para escalar horizontalmente distribuyendo la carga a través de múltiples servidores o nodos. A diferencia de la escalabilidad vertical (agregar más recursos a un solo servidor), la escalabilidad horizontal (agregar más servidores) permite manejar grandes volúmenes de datos y tráfico de manera eficiente.
			Esta característica es crucial para aplicaciones de alta disponibilidad que requieren manejar grandes cantidades de datos en tiempo real.

		- Alto Rendimiento para Lecturas y Escrituras:

			Los gestores NoSQL están optimizados para realizar operaciones de lectura y escritura de manera rápida, lo que los hace adecuados para aplicaciones que requieren alta velocidad de procesamiento, como análisis en tiempo real, registros de eventos, y sistemas de recomendación.

			Al no depender de uniones complejas y transacciones ACID (Atomicidad, Consistencia, Aislamiento, Durabilidad) en la mayoría de los casos, pueden ofrecer un rendimiento superior para ciertos tipos de consultas.

		- Replicación y Alta Disponibilidad:

			Los sistemas NoSQL suelen ofrecer capacidades de replicación de datos de manera nativa, lo que permite que los datos se copien automáticamente a varios nodos. Esto mejora la tolerancia a fallos y garantiza la alta disponibilidad.

			Algunos gestores utilizan modelos de consistencia eventual en lugar de consistencia estricta para proporcionar mejor disponibilidad y particionamiento.

		- Modelo de Consistencia Flexible:

			A diferencia de las bases de datos relacionales, que suelen seguir un modelo de consistencia estricta (ACID), muchos sistemas NoSQL optan por un enfoque de consistencia eventual (BASE: Basically Available, Soft state, Eventually consistent). Esto significa que los datos pueden no ser consistentes en todos los nodos de inmediato, pero se sincronizarán con el tiempo.

			Esto permite una mejor disponibilidad y rendimiento en sistemas distribuidos a gran escala.

		- Soporte para Datos No Estructurados y Semi-estructurados:

			Los gestores de bases de datos NoSQL están diseñados para almacenar y gestionar datos no estructurados y semi-estructurados, como documentos JSON, archivos XML, datos binarios, etc. Esto permite manejar una amplia variedad de tipos de datos y adaptarse a las necesidades de aplicaciones modernas que manejan diferentes formatos de datos.
Los tipos de datos soportados incluyen texto, multimedia, datos anidados, y datos jerárquicos.

		- Optimización para Consultas Específicas:

			Los sistemas NoSQL están diseñados para optimizar ciertos tipos de consultas según el modelo de datos utilizado. Por ejemplo, las bases de datos de documentos son eficientes para consultas basadas en documentos, mientras que las bases de datos de grafos son ideales para consultas de relaciones complejas y navegación de grafos.
		
			Esta optimización específica puede proporcionar un rendimiento mucho mejor que los RDBMS tradicionales para casos de uso específicos.

		- Modelos de Datos Diversos:

			Las bases de datos NoSQL ofrecen diferentes modelos de datos que se adaptan a diferentes casos de uso: clave-valor, documentos, columnas anchas y grafos, entre otros. Cada modelo tiene sus propias ventajas y es adecuado para diferentes tipos de aplicaciones y necesidades de datos.

			Esto proporciona flexibilidad para elegir el modelo adecuado que mejor se adapte a los requisitos de la aplicación.

		- Facilidad de Desarrollo y Integración:

			Muchos sistemas NoSQL proporcionan una integración sencilla con lenguajes de programación modernos y herramientas de desarrollo. Los desarrolladores pueden trabajar con estructuras de datos nativas (como JSON) que son compatibles con las tecnologías web y móviles actuales.

			Además, el uso de API RESTful y otros protocolos modernos facilita la integración con otros servicios y aplicaciones.

		- Soporte para Distribución Geográfica:

			Algunos gestores NoSQL están diseñados para distribuir datos geográficamente en varios centros de datos. Esto mejora la latencia y la disponibilidad, permitiendo que los datos estén más cerca del usuario final.

			Esta capacidad es especialmente útil para aplicaciones globales que requieren un acceso rápido y confiable en diferentes ubicaciones geográficas.

	Conclusión

		Los gestores de bases de datos no relacionales están diseñados para abordar las limitaciones de los sistemas relacionales en entornos modernos de grandes volúmenes de datos, alta escalabilidad y datos no estructurados. Las características mencionadas anteriormente hacen que los sistemas NoSQL sean adecuados para una amplia gama de aplicaciones, como análisis en tiempo real, redes sociales, comercio electrónico, sistemas de recomendación, y más.

